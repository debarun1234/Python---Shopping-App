# Python - Shopping App version 1a
class Product:
    def __init__(self, product_id, name, category, price):
        self.product_id = product_id
        self.name = name
        self.category = category
        self.price = price
class Category:
    def __init__(self, category_id, name):
        self.category_id = category_id
        self.name = name
class Cart:
    def __init__(self):
        self.items = {}

    def add_item(self, product, quantity):
        if product.product_id in self.items:
            self.items[product.product_id]['quantity'] += quantity
        else:
            self.items[product.product_id] = {'product': product, 'quantity': quantity}

    def remove_item(self, product_id, quantity):
        if product_id in self.items and self.items[product_id]['quantity'] >= quantity:
            self.items[product_id]['quantity'] -= quantity
            if self.items[product_id]['quantity'] <= 0:
                del self.items[product_id]
class User:
    def __init__(self, username, password, is_admin=False):
        self.username = username
        self.password = password
        self.is_admin = is_admin
        self.cart = Cart()

    def view_catalog(self, catalog):
        if not catalog.products:
            print("No products available.")
            return

        # Display header
        header = "| {0:<10} | {1:<20} | {2:<15} | {3:<10} |".format("Product ID", "Name", "Category", "Price")
        print("-" * len(header))
        print(header)
        print("-" * len(header))

        # Iterate over products and format each row
        for product_id, product in catalog.products.items():
            row = "| {0:<10} | {1:<20} | {2:<15} | ${3:<9} |".format(product.product_id, product.name, product.category, product.price)
            print(row)
        print("-" * len(header))
class Admin(User):
    def __init__(self, username, password):
        super().__init__(username, password, True)

    def validate_product_details(self, product_id, name, category, price, catalog):
        if product_id in catalog.products:
            print("Error: Product ID already exists.")
            return False
        if not re.match("^[A-Za-z ]+$", name):
            print("Error: Names must only contain letters.")
            return False
        if not category in [cat.name for cat in catalog.categories.values()]:
            print("Error: Invalid category selected.")
            return False
        try:
            float(price)
        except ValueError:
            print("Error: Price must be a number.")
            return False
        return True

    def add_product(self, catalog, product_id, name, category, price):
        if self.validate_product_details(product_id, name, category, price, catalog):
            new_product = Product(product_id, name, category, price)
            catalog.products[product_id] = new_product
            print(f"Product {name} added to catalog.")
class Catalog:
    def __init__(self):
        self.products = {}
        self.categories = {}

    def add_category(self, name):
        new_id = len(self.categories) + 1
        self.categories[str(new_id)] = Category(str(new_id), name)

def authenticate(users, username, password):
    if username in users and users[username].password == password:
        return users[username]
    return None
def choose_category(catalog):
    if not catalog.categories:
        print("No categories available.")
        return None
    print("\nAvailable Categories:")
    for id, cat in catalog.categories.items():
        print(f"  {id}. {cat.name}")
    choice = input("Select a category by number (or 'exit' to cancel): ")
    if choice.lower() == 'exit':
        return None
    if choice in catalog.categories:
        return catalog.categories[choice].name
    print("Invalid choice.")
    return None
def main():
    print("Welcome to the Demo Marketplace!")
    users = {
        "admin": Admin("admin", "password123"),
        "user1": User("user1", "password123")
    }
    catalog = Catalog()
    catalog.add_category("Footwear")
    catalog.add_category("Clothing")
    catalog.add_category("Electronics")

    while True:
        username = input("Enter username or type 'exit' to quit: ")
        if username.lower() == 'exit':
            print("Exiting the system. Goodbye!")
            break
        password = input("Enter password: ")
        user = authenticate(users, username, password)
        if user:
            while True:
                if user.is_admin:
                    action = input("Actions (Admin): add_product, view_catalog, logout: ")
                else:
                    action = input("Actions (User): view_catalog, logout: ")

                if action == "logout":
                    print("You have logged out.")
                    break
                elif action == "add_product" and user.is_admin:
                    product_id = input("Enter new product ID: ")
                    name = input("Enter product name: ")
                    print("Choose a category for the product:")
                    category = choose_category(catalog)
                    if category is None:
                        continue
                    price = input("Enter price: ")
                    user.add_product(catalog, product_id, name, category, price)
                elif action == "view_catalog":
                    user.view_catalog(catalog)
                else:
                    print("Invalid action.")
        else:
            print("Invalid login, please try again.")

if __name__ == "__main__":
    main()
